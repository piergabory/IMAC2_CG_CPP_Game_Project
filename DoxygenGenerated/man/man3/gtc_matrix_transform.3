.TH "gtc_matrix_transform" 3 "Fri Dec 14 2018" "IMAC3_CG_CPP_Game_Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gtc_matrix_transform \- Defines functions that generate common transformation matrices\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL \fBdetail::tmat4x4\fP< T, P > \fBglm::translate\fP (\fBdetail::tmat4x4\fP< T, P > const &m, \fBdetail::tvec3\fP< T, P > const &v)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL \fBdetail::tmat4x4\fP< T, P > \fBglm::rotate\fP (\fBdetail::tmat4x4\fP< T, P > const &m, T const &\fBangle\fP, \fBdetail::tvec3\fP< T, P > const &\fBaxis\fP)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL \fBdetail::tmat4x4\fP< T, P > \fBglm::scale\fP (\fBdetail::tmat4x4\fP< T, P > const &m, \fBdetail::tvec3\fP< T, P > const &v)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBdetail::tmat4x4\fP< T, defaultp > \fBglm::ortho\fP (T const &left, T const &right, T const &bottom, T const &top, T const &zNear, T const &zFar)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBdetail::tmat4x4\fP< T, defaultp > \fBglm::ortho\fP (T const &left, T const &right, T const &bottom, T const &top)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBdetail::tmat4x4\fP< T, defaultp > \fBglm::frustum\fP (T const &left, T const &right, T const &bottom, T const &top, T const &near, T const &far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBdetail::tmat4x4\fP< T, defaultp > \fBglm::perspective\fP (T const &fovy, T const &aspect, T const &near, T const &far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBdetail::tmat4x4\fP< T, defaultp > \fBglm::perspectiveFov\fP (T const &fov, T const &width, T const &height, T const &near, T const &far)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBdetail::tmat4x4\fP< T, defaultp > \fBglm::infinitePerspective\fP (T fovy, T aspect, T near)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBdetail::tmat4x4\fP< T, defaultp > \fBglm::tweakedInfinitePerspective\fP (T fovy, T aspect, T near)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_DECL \fBdetail::tmat4x4\fP< T, defaultp > \fBglm::tweakedInfinitePerspective\fP (T fovy, T aspect, T near, T ep)"
.br
.ti -1c
.RI "template<typename T , typename U , precision P> GLM_FUNC_DECL \fBdetail::tvec3\fP< T, P > \fBglm::project\fP (\fBdetail::tvec3\fP< T, P > const &obj, \fBdetail::tmat4x4\fP< T, P > const &model, \fBdetail::tmat4x4\fP< T, P > const &\fBproj\fP, \fBdetail::tvec4\fP< U, P > const &viewport)"
.br
.ti -1c
.RI "template<typename T , typename U , precision P> GLM_FUNC_DECL \fBdetail::tvec3\fP< T, P > \fBglm::unProject\fP (\fBdetail::tvec3\fP< T, P > const &win, \fBdetail::tmat4x4\fP< T, P > const &model, \fBdetail::tmat4x4\fP< T, P > const &\fBproj\fP, \fBdetail::tvec4\fP< U, P > const &viewport)"
.br
.ti -1c
.RI "template<typename T , precision P, typename U > GLM_FUNC_DECL \fBdetail::tmat4x4\fP< T, P > \fBglm::pickMatrix\fP (\fBdetail::tvec2\fP< T, P > const &center, \fBdetail::tvec2\fP< T, P > const &delta, \fBdetail::tvec4\fP< U, P > const &viewport)"
.br
.ti -1c
.RI "template<typename T , precision P> GLM_FUNC_DECL \fBdetail::tmat4x4\fP< T, P > \fBglm::lookAt\fP (\fBdetail::tvec3\fP< T, P > const &eye, \fBdetail::tvec3\fP< T, P > const &center, \fBdetail::tvec3\fP< T, P > const &up)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Defines functions that generate common transformation matrices\&. 

The matrices generated by this extension use standard OpenGL fixed-function conventions\&. For example, the lookAt function generates a transform from world space into the specific eye space that the projective matrix functions (perspective, ortho, etc) are designed to expect\&. The OpenGL compatibility specifications defines the particular layout of this eye space\&.
.PP
<\fBglm/gtc/matrix_transform\&.hpp\fP> need to be included to use these functionalities\&. 
.SH "Function Documentation"
.PP 
.SS "template<typename T > GLM_FUNC_DECL \fBdetail::tmat4x4\fP<T, defaultp> glm::frustum (T const & left, T const & right, T const & bottom, T const & top, T const & near, T const & far)"
Creates a frustum matrix\&.
.PP
\fBParameters:\fP
.RS 4
\fIleft\fP 
.br
\fIright\fP 
.br
\fIbottom\fP 
.br
\fItop\fP 
.br
\fInear\fP 
.br
\fIfar\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Value type used to build the matrix\&. Currently supported: half (not recommanded), float or double\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_matrix_transform\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL \fBdetail::tmat4x4\fP<T, defaultp> glm::infinitePerspective (T fovy, T aspect, T near)"
Creates a matrix for a symmetric perspective-view frustum with far plane at infinite\&.
.PP
\fBParameters:\fP
.RS 4
\fIfovy\fP Expressed in radians if GLM_FORCE_RADIANS is define or degrees otherwise\&. 
.br
\fIaspect\fP 
.br
\fInear\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Value type used to build the matrix\&. Currently supported: half (not recommanded), float or double\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_matrix_transform\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL \fBdetail::tmat4x4\fP<T, P> glm::lookAt (\fBdetail::tvec3\fP< T, P > const & eye, \fBdetail::tvec3\fP< T, P > const & center, \fBdetail::tvec3\fP< T, P > const & up)"
Build a look at view matrix\&.
.PP
\fBParameters:\fP
.RS 4
\fIeye\fP Position of the camera 
.br
\fIcenter\fP Position where the camera is looking at 
.br
\fIup\fP Normalized up vector, how the camera is oriented\&. Typically (0, 0, 1) 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_matrix_transform\fP 
.PP
- \fBfrustum(T const & left, T const & right, T const & bottom, T const & top, T const & nearVal, T const & farVal)\fP \fBfrustum(T const & left, T const & right, T const & bottom, T const & top, T const & nearVal, T const & farVal)\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL \fBdetail::tmat4x4\fP<T, defaultp> glm::ortho (T const & left, T const & right, T const & bottom, T const & top, T const & zNear, T const & zFar)"
Creates a matrix for an orthographic parallel viewing volume\&.
.PP
\fBParameters:\fP
.RS 4
\fIleft\fP 
.br
\fIright\fP 
.br
\fIbottom\fP 
.br
\fItop\fP 
.br
\fIzNear\fP 
.br
\fIzFar\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Value type used to build the matrix\&. Currently supported: half (not recommanded), float or double\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_matrix_transform\fP 
.PP
- \fBglm::ortho(T const & left, T const & right, T const & bottom, T const & top)\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL \fBdetail::tmat4x4\fP<T, defaultp> glm::ortho (T const & left, T const & right, T const & bottom, T const & top)"
Creates a matrix for projecting two-dimensional coordinates onto the screen\&.
.PP
\fBParameters:\fP
.RS 4
\fIleft\fP 
.br
\fIright\fP 
.br
\fIbottom\fP 
.br
\fItop\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Value type used to build the matrix\&. Currently supported: half (not recommanded), float or double\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_matrix_transform\fP 
.PP
- \fBglm::ortho(T const & left, T const & right, T const & bottom, T const & top, T const & zNear, T const & zFar)\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL \fBdetail::tmat4x4\fP<T, defaultp> glm::perspective (T const & fovy, T const & aspect, T const & near, T const & far)"
Creates a matrix for a symetric perspective-view frustum\&.
.PP
\fBParameters:\fP
.RS 4
\fIfovy\fP Expressed in radians if GLM_FORCE_RADIANS is define or degrees otherwise\&. 
.br
\fIaspect\fP 
.br
\fInear\fP 
.br
\fIfar\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Value type used to build the matrix\&. Currently supported: half (not recommanded), float or double\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_matrix_transform\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL \fBdetail::tmat4x4\fP<T, defaultp> glm::perspectiveFov (T const & fov, T const & width, T const & height, T const & near, T const & far)"
Builds a perspective projection matrix based on a field of view\&.
.PP
\fBParameters:\fP
.RS 4
\fIfov\fP Expressed in radians if GLM_FORCE_RADIANS is define or degrees otherwise\&. 
.br
\fIwidth\fP 
.br
\fIheight\fP 
.br
\fInear\fP 
.br
\fIfar\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Value type used to build the matrix\&. Currently supported: half (not recommanded), float or double\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_matrix_transform\fP 
.RE
.PP
todo max(width , Height) / min(width , Height)? 
.SS "template<typename T , precision P, typename U > GLM_FUNC_DECL \fBdetail::tmat4x4\fP<T, P> glm::pickMatrix (\fBdetail::tvec2\fP< T, P > const & center, \fBdetail::tvec2\fP< T, P > const & delta, \fBdetail::tvec4\fP< U, P > const & viewport)"
Define a picking region
.PP
\fBParameters:\fP
.RS 4
\fIcenter\fP 
.br
\fIdelta\fP 
.br
\fIviewport\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Native type used for the computation\&. Currently supported: half (not recommanded), float or double\&. 
.br
\fIU\fP Currently supported: Floating-point types and integer types\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_matrix_transform\fP 
.RE
.PP

.SS "template<typename T , typename U , precision P> GLM_FUNC_DECL \fBdetail::tvec3\fP<T, P> glm::project (\fBdetail::tvec3\fP< T, P > const & obj, \fBdetail::tmat4x4\fP< T, P > const & model, \fBdetail::tmat4x4\fP< T, P > const & proj, \fBdetail::tvec4\fP< U, P > const & viewport)"
Map the specified object coordinates (obj\&.x, obj\&.y, obj\&.z) into window coordinates\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP 
.br
\fImodel\fP 
.br
\fIproj\fP 
.br
\fIviewport\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Native type used for the computation\&. Currently supported: half (not recommanded), float or double\&. 
.br
\fIU\fP Currently supported: Floating-point types and integer types\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_matrix_transform\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL \fBdetail::tmat4x4\fP<T, P> glm::rotate (\fBdetail::tmat4x4\fP< T, P > const & m, T const & angle, \fBdetail::tvec3\fP< T, P > const & axis)"
Builds a rotation 4 * 4 matrix created from an axis vector and an angle\&.
.PP
\fBParameters:\fP
.RS 4
\fIm\fP Input matrix multiplied by this rotation matrix\&. 
.br
\fIangle\fP Rotation angle expressed in radians if GLM_FORCE_RADIANS is define or degrees otherwise\&. 
.br
\fIaxis\fP Rotation axis, recommanded to be normalized\&. 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Value type used to build the matrix\&. Supported: half, float or double\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_matrix_transform\fP 
.PP
\fBGLM_GTX_transform\fP 
.PP
- rotate(T angle, T x, T y, T z) 
.PP
- rotate(detail::tmat4x4<T, P> const & m, T angle, T x, T y, T z) 
.PP
- \fBrotate(T angle, detail::tvec3<T, P> const & v)\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL \fBdetail::tmat4x4\fP<T, P> glm::scale (\fBdetail::tmat4x4\fP< T, P > const & m, \fBdetail::tvec3\fP< T, P > const & v)"
Builds a scale 4 * 4 matrix created from 3 scalars\&.
.PP
\fBParameters:\fP
.RS 4
\fIm\fP Input matrix multiplied by this scale matrix\&. 
.br
\fIv\fP Ratio of scaling for each axis\&. 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Value type used to build the matrix\&. Currently supported: half (not recommanded), float or double\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_matrix_transform\fP 
.PP
\fBGLM_GTX_transform\fP 
.PP
- scale(T x, T y, T z) scale(T const & x, T const & y, T const & z) 
.PP
- scale(detail::tmat4x4<T, P> const & m, T x, T y, T z) 
.PP
- \fBscale(detail::tvec3<T, P> const & v)\fP 
.RE
.PP

.SS "template<typename T , precision P> GLM_FUNC_DECL \fBdetail::tmat4x4\fP<T, P> glm::translate (\fBdetail::tmat4x4\fP< T, P > const & m, \fBdetail::tvec3\fP< T, P > const & v)"
Builds a translation 4 * 4 matrix created from a vector of 3 components\&.
.PP
\fBParameters:\fP
.RS 4
\fIm\fP Input matrix multiplied by this translation matrix\&. 
.br
\fIv\fP Coordinates of a translation vector\&. 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Value type used to build the matrix\&. Currently supported: half (not recommanded), float or double\&. 
.PP
.nf
#include <glm/glm\&.hpp>
#include <glm/gtc/matrix_transform\&.hpp>
\&.\&.\&.
glm::mat4 m = glm::translate(glm::mat4(1\&.0f), glm::vec3(1\&.0f));
// m[0][0] == 1\&.0f, m[0][1] == 0\&.0f, m[0][2] == 0\&.0f, m[0][3] == 0\&.0f
// m[1][0] == 0\&.0f, m[1][1] == 1\&.0f, m[1][2] == 0\&.0f, m[1][3] == 0\&.0f
// m[2][0] == 0\&.0f, m[2][1] == 0\&.0f, m[2][2] == 1\&.0f, m[2][3] == 0\&.0f
// m[3][0] == 1\&.0f, m[3][1] == 1\&.0f, m[3][2] == 1\&.0f, m[3][3] == 1\&.0f

.fi
.PP
 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_matrix_transform\fP 
.PP
\fBGLM_GTX_transform\fP 
.PP
- translate(T x, T y, T z) 
.PP
- translate(detail::tmat4x4<T, P> const & m, T x, T y, T z) 
.PP
- \fBtranslate(detail::tvec3<T, P> const & v)\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL \fBdetail::tmat4x4\fP<T, defaultp> glm::tweakedInfinitePerspective (T fovy, T aspect, T near)"
Creates a matrix for a symmetric perspective-view frustum with far plane at infinite for graphics hardware that doesn't support depth clamping\&.
.PP
\fBParameters:\fP
.RS 4
\fIfovy\fP Expressed in radians if GLM_FORCE_RADIANS is define or degrees otherwise\&. 
.br
\fIaspect\fP 
.br
\fInear\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Value type used to build the matrix\&. Currently supported: half (not recommanded), float or double\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_matrix_transform\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_DECL \fBdetail::tmat4x4\fP<T, defaultp> glm::tweakedInfinitePerspective (T fovy, T aspect, T near, T ep)"
Creates a matrix for a symmetric perspective-view frustum with far plane at infinite for graphics hardware that doesn't support depth clamping\&.
.PP
\fBParameters:\fP
.RS 4
\fIfovy\fP Expressed in radians if GLM_FORCE_RADIANS is define or degrees otherwise\&. 
.br
\fIaspect\fP 
.br
\fInear\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Value type used to build the matrix\&. Currently supported: half (not recommanded), float or double\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_matrix_transform\fP 
.RE
.PP

.SS "template<typename T , typename U , precision P> GLM_FUNC_DECL \fBdetail::tvec3\fP<T, P> glm::unProject (\fBdetail::tvec3\fP< T, P > const & win, \fBdetail::tmat4x4\fP< T, P > const & model, \fBdetail::tmat4x4\fP< T, P > const & proj, \fBdetail::tvec4\fP< U, P > const & viewport)"
Map the specified window coordinates (win\&.x, win\&.y, win\&.z) into object coordinates\&.
.PP
\fBParameters:\fP
.RS 4
\fIwin\fP 
.br
\fImodel\fP 
.br
\fIproj\fP 
.br
\fIviewport\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Native type used for the computation\&. Currently supported: half (not recommanded), float or double\&. 
.br
\fIU\fP Currently supported: Floating-point types and integer types\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_matrix_transform\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for IMAC3_CG_CPP_Game_Project from the source code\&.
