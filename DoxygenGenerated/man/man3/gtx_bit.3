.TH "gtx_bit" 3 "Tue Dec 18 2018" "IMAC run" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gtx_bit \- Allow to perform bit operations on integer values\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename genIType > GLM_FUNC_DECL genIType \fBglm::mask\fP (genIType const &count)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBglm::highestBitValue\fP (genType const &value)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL bool \fBglm::isPowerOfTwo\fP (genType const &value)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBglm::powerOfTwoAbove\fP (genType const &value)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBglm::powerOfTwoBelow\fP (genType const &value)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBglm::powerOfTwoNearest\fP (genType const &value)"
.br
.ti -1c
.RI "template<typename genType > GLM_DEPRECATED GLM_FUNC_DECL genType \fBglm::bitRevert\fP (genType const &value)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBglm::bitRotateRight\fP (genType const &In, std::size_t Shift)"
.br
.ti -1c
.RI "template<typename genType > GLM_FUNC_DECL genType \fBglm::bitRotateLeft\fP (genType const &In, std::size_t Shift)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBglm::fillBitfieldWithOne\fP (genIUType const &Value, int const &FromBit, int const &ToBit)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBglm::fillBitfieldWithZero\fP (genIUType const &Value, int const &FromBit, int const &ToBit)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint16\fP \fBglm::bitfieldInterleave\fP (\fBint8\fP x, \fBint8\fP y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint16\fP \fBglm::bitfieldInterleave\fP (\fBuint8\fP x, \fBuint8\fP y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint32\fP \fBglm::bitfieldInterleave\fP (\fBint16\fP x, \fBint16\fP y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint32\fP \fBglm::bitfieldInterleave\fP (\fBuint16\fP x, \fBuint16\fP y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint64\fP \fBglm::bitfieldInterleave\fP (\fBint32\fP x, \fBint32\fP y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint64\fP \fBglm::bitfieldInterleave\fP (\fBuint32\fP x, \fBuint32\fP y)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint32\fP \fBglm::bitfieldInterleave\fP (\fBint8\fP x, \fBint8\fP y, \fBint8\fP z)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint32\fP \fBglm::bitfieldInterleave\fP (\fBuint8\fP x, \fBuint8\fP y, \fBuint8\fP z)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint64\fP \fBglm::bitfieldInterleave\fP (\fBint16\fP x, \fBint16\fP y, \fBint16\fP z)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint64\fP \fBglm::bitfieldInterleave\fP (\fBuint16\fP x, \fBuint16\fP y, \fBuint16\fP z)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint64\fP \fBglm::bitfieldInterleave\fP (\fBint32\fP x, \fBint32\fP y, \fBint32\fP z)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint64\fP \fBglm::bitfieldInterleave\fP (\fBuint32\fP x, \fBuint32\fP y, \fBuint32\fP z)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint32\fP \fBglm::bitfieldInterleave\fP (\fBint8\fP x, \fBint8\fP y, \fBint8\fP z, \fBint8\fP w)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint32\fP \fBglm::bitfieldInterleave\fP (\fBuint8\fP x, \fBuint8\fP y, \fBuint8\fP z, \fBuint8\fP w)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBint64\fP \fBglm::bitfieldInterleave\fP (\fBint16\fP x, \fBint16\fP y, \fBint16\fP z, \fBint16\fP w)"
.br
.ti -1c
.RI "GLM_FUNC_DECL \fBuint64\fP \fBglm::bitfieldInterleave\fP (\fBuint16\fP x, \fBuint16\fP y, \fBuint16\fP z, \fBuint16\fP w)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Allow to perform bit operations on integer values\&. 

<\fBglm/gtx/bit\&.hpp\fP> need to be included to use these functionalities\&. 
.SH "Function Documentation"
.PP 
.SS "GLM_FUNC_QUALIFIER \fBint16\fP glm::bitfieldInterleave (\fBint8\fP x, \fBint8\fP y)"
Interleaves the bits of x and y\&. The first bit is the first bit of x followed by the first bit of y\&. The other bits are interleaved following the previous sequence\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBuint16\fP glm::bitfieldInterleave (\fBuint8\fP x, \fBuint8\fP y)"
Interleaves the bits of x and y\&. The first bit is the first bit of x followed by the first bit of y\&. The other bits are interleaved following the previous sequence\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBint32\fP glm::bitfieldInterleave (\fBint16\fP x, \fBint16\fP y)"
Interleaves the bits of x and y\&. The first bit is the first bit of x followed by the first bit of y\&. The other bits are interleaved following the previous sequence\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBuint32\fP glm::bitfieldInterleave (\fBuint16\fP x, \fBuint16\fP y)"
Interleaves the bits of x and y\&. The first bit is the first bit of x followed by the first bit of y\&. The other bits are interleaved following the previous sequence\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBint64\fP glm::bitfieldInterleave (\fBint32\fP x, \fBint32\fP y)"
Interleaves the bits of x and y\&. The first bit is the first bit of x followed by the first bit of y\&. The other bits are interleaved following the previous sequence\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBuint64\fP glm::bitfieldInterleave (\fBuint32\fP x, \fBuint32\fP y)"
Interleaves the bits of x and y\&. The first bit is the first bit of x followed by the first bit of y\&. The other bits are interleaved following the previous sequence\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBint32\fP glm::bitfieldInterleave (\fBint8\fP x, \fBint8\fP y, \fBint8\fP z)"
Interleaves the bits of x, y and z\&. The first bit is the first bit of x followed by the first bit of y and the first bit of z\&. The other bits are interleaved following the previous sequence\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBuint32\fP glm::bitfieldInterleave (\fBuint8\fP x, \fBuint8\fP y, \fBuint8\fP z)"
Interleaves the bits of x, y and z\&. The first bit is the first bit of x followed by the first bit of y and the first bit of z\&. The other bits are interleaved following the previous sequence\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBint64\fP glm::bitfieldInterleave (\fBint16\fP x, \fBint16\fP y, \fBint16\fP z)"
Interleaves the bits of x, y and z\&. The first bit is the first bit of x followed by the first bit of y and the first bit of z\&. The other bits are interleaved following the previous sequence\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBuint64\fP glm::bitfieldInterleave (\fBuint16\fP x, \fBuint16\fP y, \fBuint16\fP z)"
Interleaves the bits of x, y and z\&. The first bit is the first bit of x followed by the first bit of y and the first bit of z\&. The other bits are interleaved following the previous sequence\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBint64\fP glm::bitfieldInterleave (\fBint32\fP x, \fBint32\fP y, \fBint32\fP z)"
Interleaves the bits of x, y and z\&. The first bit is the first bit of x followed by the first bit of y and the first bit of z\&. The other bits are interleaved following the previous sequence\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBuint64\fP glm::bitfieldInterleave (\fBuint32\fP x, \fBuint32\fP y, \fBuint32\fP z)"
Interleaves the bits of x, y and z\&. The first bit is the first bit of x followed by the first bit of y and the first bit of z\&. The other bits are interleaved following the previous sequence\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBint32\fP glm::bitfieldInterleave (\fBint8\fP x, \fBint8\fP y, \fBint8\fP z, \fBint8\fP w)"
Interleaves the bits of x, y, z and w\&. The first bit is the first bit of x followed by the first bit of y, the first bit of z and finally the first bit of w\&. The other bits are interleaved following the previous sequence\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBuint32\fP glm::bitfieldInterleave (\fBuint8\fP x, \fBuint8\fP y, \fBuint8\fP z, \fBuint8\fP w)"
Interleaves the bits of x, y, z and w\&. The first bit is the first bit of x followed by the first bit of y, the first bit of z and finally the first bit of w\&. The other bits are interleaved following the previous sequence\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBint64\fP glm::bitfieldInterleave (\fBint16\fP x, \fBint16\fP y, \fBint16\fP z, \fBint16\fP w)"
Interleaves the bits of x, y, z and w\&. The first bit is the first bit of x followed by the first bit of y, the first bit of z and finally the first bit of w\&. The other bits are interleaved following the previous sequence\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "GLM_FUNC_QUALIFIER \fBuint64\fP glm::bitfieldInterleave (\fBuint16\fP x, \fBuint16\fP y, \fBuint16\fP z, \fBuint16\fP w)"
Interleaves the bits of x, y, z and w\&. The first bit is the first bit of x followed by the first bit of y, the first bit of z and finally the first bit of w\&. The other bits are interleaved following the previous sequence\&.
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "template<typename genType > GLM_DEPRECATED GLM_FUNC_DECL genType glm::bitRevert (genType const & value)"
Revert all bits of any integer based type\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::bitRotateLeft (genType const & In, std::size_t Shift)"
Rotate all bits to the left\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::bitRotateRight (genType const & In, std::size_t Shift)"
Rotate all bits to the right\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "template<typename genIUType > GLM_FUNC_DECL genIUType glm::fillBitfieldWithOne (genIUType const & Value, int const & FromBit, int const & ToBit)"
Set to 1 a range of bits\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "template<typename genIUType > GLM_FUNC_DECL genIUType glm::fillBitfieldWithZero (genIUType const & Value, int const & FromBit, int const & ToBit)"
Set to 0 a range of bits\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::highestBitValue (genType const & value)"
Find the highest bit set to 1 in a integer variable and return its value\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL bool glm::isPowerOfTwo (genType const & value)"
Return true if the value is a power of two number\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "template<typename genIType > GLM_FUNC_DECL genIType glm::mask (genIType const & count)"
Build a mask of 'count' bits 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::powerOfTwoAbove (genType const & value)"
Return the power of two number which value is just higher the input value\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::powerOfTwoBelow (genType const & value)"
Return the power of two number which value is just lower the input value\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SS "template<typename genType > GLM_FUNC_DECL genType glm::powerOfTwoNearest (genType const & value)"
Return the power of two number which value is the closet to the input value\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTX_bit\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for IMAC run from the source code\&.
